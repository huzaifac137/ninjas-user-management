paths:
  /api/v1/auth/signup/super-admin:
    post:
      summary: Create super admin manually
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignupRequest"
      responses:
        "201":
          description: User created successfully
        "409":
          description: User already exists or role missing
        "500":
          description: Internal server error
  /api/v1/auth/login:
    post:
      summary: Login any user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: Unauthorized
  /api/v1/permissions:
    get:
      summary: Get all permissions
      responses:
        "200":
          description: Permissions list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Permission"
    post:
      summary: Create new permission
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: "any-permission"
      responses:
        "200":
          description: Permission created successfully

  /api/v1/roles:
    get:
      summary: Get all roles
      responses:
        "200":
          description: Roles list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Role"
    post:  
      summary: Create new role
      requestBody:
          required: true
          content:
           application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: "any-role"
      responses:
        "200":
          description: Role created successfully
  
  /api/v1/users:
    get:
      summary: Get all users
      responses:
        "200":
          description: List of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
    post:
      summary: Create user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserRequest"
      responses:
        "201":
          description: User created
        "409":
          description: Conflict
        "500":
          description: Internal error
  /api/v1/users/me/details:
    get:
      summary: Get my user details
      responses:
        "200":
          description: Current user details
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  user:
                    $ref: "#/components/schemas/User"
  /api/v1/users/{id}:
    get:
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: User details
        "404":
          description: Not found
    patch:
      summary: Update user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateUserRequest"
      responses:
        "200":
          description: User updated
        "404":
          description: Not found
    delete:
      summary: Delete user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "201":
          description: User deleted
        "404":
          description: Not found
  /api/v1/users/{userId}/role/{roleId}:
    patch:
      summary: Assign role to user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: roleId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Role assigned
        "400":
          description: Bad request
  /api/v1/users/roles-permissions/seed-it:
    post:
      summary: Seed roles and permissions (internal use)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                secret:
                  type: string
                  description: The secret key for seeding (see the seeder middleware)
                  example: "my-secret-key"
      responses:
        "200":
          description: Seeded successfully

  /api/v1/roles/assign-permissions:
    patch:
      summary: Assign new permissions to role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignRemovePermissionsRequest"
      responses:
        "200":
          description: Permissions assigned successfully

  /api/v1/roles/remove-permissions:
    delete:
      summary: remove permissions from role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignRemovePermissionsRequest"
      responses:
        "200":
          description: Permissions removed successfully

  /api/v1/permissions/{permissionId}:
    delete:
      summary: Delete permission from app
      parameters:
        - name: permissionId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Permission deleted successfully



components:
  schemas:
    SignupRequest:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string
    LoginResponse:
      type: object
      properties:
        message:
          type: string
        user:
          $ref: "#/components/schemas/User"
        accessToken:
          type: string
    CreateUserRequest:
      type: object
      required:
        - name
        - email
        - password
        - roleId
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        roleId:
          type: string
    UpdateUserRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
    AssignRemovePermissionsRequest:
      type: object
      properties:
        roleId:
          type: string
        permissionIds:
          type: array
          items:
            type: string
    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        role:
          $ref: "#/components/schemas/Role"
    Role:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
    Permission:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
